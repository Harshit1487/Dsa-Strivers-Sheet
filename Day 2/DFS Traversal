void dfs(vector<int> adj[], vector<bool>& vis, vector<int>& temp, int i){
    
    if(vis[i]) return;
    vis[i]=true;
    temp.push_back(i);
    
    for(auto it:adj[i]){
        if(!vis[it])
            dfs(adj, vis, temp, it);
    }
}

vector<vector<int>> depthFirstSearch(int v, int e, vector<vector<int>> &edges)
{
    // Write your code here
    vector<int> adj[v];
    for(int i=0;i<e;i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    
    
    vector<bool> vis(v, false);
    vector<vector<int>> res;
 
    for(int i=0;i<v;i++){
           vector<int> temp;
           if(vis[i]==false){
               dfs(adj, vis, temp, i);
               if(temp.size()!=0){
                   sort(temp.begin(), temp.end());
                   res.push_back(temp);
               }
           }
    }
    return res;
}

bool dfs(int i, int p, vector<int>& vis, vector<int> adj[]){
    vis[i]=1;
    
    for(auto it:adj[i]){
        if(!vis[it]){
            if(dfs(it, i, vis, adj))
                return true;
        }
        else if(it!=p) return true;
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    vector<int> adj[n+1];
    vector<int> vis(n+1, 0);
    for(int i=0;i<m;i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    
    for(int i=1;i<=n;i++){
        if(vis[i]==0){
            if(dfs(i, -1, vis, adj))
                return "Yes";
        }
    }
    
    return "No";
}

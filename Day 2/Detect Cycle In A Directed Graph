bool dfs(int i, vector<int> adj[], vector<int>& vis, vector<int>& dfsvis){
    vis[i]=1;
    dfsvis[i]=1;
    for(auto it:adj[i]){
        if(!vis[it]){
            if(dfs(it, adj, vis, dfsvis))
                return true;
        }
        else if(dfsvis[it]) return true;
    }
    dfsvis[i]=0;
    return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.
    vector<int> adj[n+1];
    vector<int> vis(n+1, 0);
    vector<int> dfsvis(n+1, 0);
    
    for(int i=0;i<edges.size();i++){
        adj[edges[i].first].push_back(edges[i].second);
    }
    
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            if(dfs(i, adj, vis, dfsvis))
                return 1;
        }
    }
    return 0;
}
